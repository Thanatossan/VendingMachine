{"version":3,"sources":["App.js","vendingMachine.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","vm","setVM","message","setMessage","balance","setbalance","change","setChange","useEffect","fetch","then","response","json","jsonData","list","product","Object","sale","pid","in_stock","price","name","alert","VendingMachine","changeCal","amount","coinValue","i","length","Math","floor","j","push","className","keys","map","id","Fragment","key","src","image","alt","onClick","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6680b67.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport VendingMachine from \"./vendingMachine\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [data, setData] = useState({});\n  const [vm, setVM] = useState({});\n  const [message, setMessage] = useState();\n  const [balance, setbalance] = useState(0);\n  const [change, setChange] = useState([]);\n  useEffect(() => {\n    fetch(\"https://www.mocky.io/v2/5c77c5b330000051009d64c9\")\n      // fetch(\"https://my-json-server.typicode.com/adyngom/vmapi/db\")\n      .then(response => response.json())\n      .then(jsonData => {\n        setData(jsonData.data);\n        setVM(VendingMachine(data));\n      });\n  }, [balance, data]);\n  const sale = (pid, balance) => {\n    return vm.sale(pid, balance);\n  };\n  const changeCal = balance => {\n    var change = [];\n    // const coinTpye = [\"10\",\"5\",\"2\",\"1\"];\n    const coinValue = [10, 5, 2, 1];\n    var amount;\n    for (var i = 0; i < coinValue.length; i++) {\n      amount = Math.floor(balance / coinValue[i]);\n      if (amount > 0) {\n        for (var j = 0; j < amount; j++) {\n          change.push(coinValue[i]);\n          balance = balance - coinValue[i];\n        }\n      }\n    }\n    return change;\n  };\n\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"row\">\n          {Object.keys(data).map(id => {\n            if (balance < data[id].price) {\n              return (\n                <React.Fragment key={id}>\n                  <div className=\"col-4\">\n                    <div className=\"card text-center\">\n                      <div className=\"card-header\">\n                        <img\n                          className=\"card-img-top\"\n                          src={data[id].image}\n                          alt={data[id].name}\n                        />\n                      </div>\n                      <div className=\"card-body\">\n                        <div className=\"col\">\n                          <p> Price: {data[id].price} coin</p>\n                          <p> {data[id].in_stock}</p>\n                        </div>\n                        <button\n                          id={id}\n                          className=\"btn btn-danger\"\n                          // onClick={() => {\n                          //   console.log(data[id].in_stock);\n                          // }}\n                        >\n                          {data[id].name}\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </React.Fragment>\n              );\n            } else {\n              return (\n                <React.Fragment key={id}>\n                  <div className=\"col-4\">\n                    <div className=\"card text-center\">\n                      <div className=\"card-header\">\n                        <img\n                          className=\"card-img-top\"\n                          src={data[id].image}\n                          alt={data[id].name}\n                        />\n                      </div>\n                      <div className=\"card-body\">\n                        <p> Price: {data[id].price} coin</p>\n                        <p> {data[id].in_stock}</p>\n                        <button\n                          id={id}\n                          className=\"btn btn-success\"\n                          onClick={e => {\n                            setMessage(sale(e.target.id, { balance }));\n                            setbalance(() => {\n                              if (data[id].in_stock === true) {\n                                setChange(changeCal(balance - data[id].price));\n\n                                return 0;\n                              } else {\n                                return balance;\n                              }\n                            });\n\n                            // setbalance(calBalance(e.target.id, { balance }));\n                          }}\n                        >\n                          {data[id].name}\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </React.Fragment>\n              );\n            }\n          })}\n        </div>\n        <div className=\"row\">\n          <div className=\"col \">\n            <h4> Got Item </h4>\n            <p>{message}</p>\n          </div>\n\n          <div className=\"col\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <p> total</p>\n                <p> {balance} </p>\n              </div>\n              <div className=\"col\">\n                {\" \"}\n                <p> Change</p>\n                <p>\n                  [\n                  {change.map(id => {\n                    return <> {id} </>;\n                  })}\n                  ]\n                </p>\n              </div>\n              <div className=\"col\">\n                <p> insert </p>\n                {[1, 2, 5, 10].map(id => {\n                  return (\n                    <React.Fragment key={id}>\n                      <button\n                        onClick={e => {\n                          setbalance(balance + id);\n                          setChange([]);\n                        }}\n                      >\n                        {id}\n                      </button>\n                    </React.Fragment>\n                  );\n                })}\n\n                <button\n                  onClick={() => {\n                    setbalance(0);\n                    setChange(changeCal(balance));\n                  }}\n                >\n                  {\" \"}\n                  refund{\" \"}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\nexport default App;\n","export default function VendingMachine(list) {\n  //   var total = balance || 0;\n  const product = list || null;\n\n  var sale = function(pid, balance) {\n    if (product[pid].in_stock === true) {\n      if (balance.balance >= product[pid].price) {\n        balance.balance = balance.balance - product[pid].price;\n        return product[pid].name;\n      } else {\n        return 0;\n      }\n    } else {\n      alert(\"PRODUCT NOT AVALIABLE\");\n    }\n  };\n  return Object({ sale });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}